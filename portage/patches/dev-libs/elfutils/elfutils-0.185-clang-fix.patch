--- a/configure.ac
+++ b/configure.ac
@@ -127,7 +127,7 @@
 		  ac_cv_c99=yes, ac_cv_c99=no)
 CFLAGS="$old_CFLAGS"])
 AS_IF([test "x$ac_cv_c99" != xyes],
-      AC_MSG_ERROR([gcc with GNU99 support required]))
+      AC_MSG_WARN([gcc with GNU99 support required]))
 
 AC_CACHE_CHECK([whether gcc supports __attribute__((visibility()))],
 	ac_cv_visibility, [dnl
--- a/configure
+++ b/configure
@@ -5161,55 +5161,6 @@
   NM="$ac_cv_prog_NM"
 fi
 
-
-# We use -std=gnu99 but have explicit checks for some language constructs
-# and GNU extensions since some compilers claim GNU99 support, but don't
-# really support all language extensions. In particular we need
-# Mixed Declarations and Code
-# https://gcc.gnu.org/onlinedocs/gcc/Mixed-Declarations.html
-# Nested Functions
-# https://gcc.gnu.org/onlinedocs/gcc/Nested-Functions.html
-# Arrays of Variable Length
-# https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gcc with GNU99 support" >&5
-$as_echo_n "checking for gcc with GNU99 support... " >&6; }
-if ${ac_cv_c99+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  old_CFLAGS="$CFLAGS"
-CFLAGS="$CFLAGS -std=gnu99"
-cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-int foo (int a)
-{
-  for (int i = 0; i < a; ++i) if (i % 4) break; int s = a; return s;
-}
-
-double bar (double a, double b)
-{
-  double square (double z) { return z * z; }
-  return square (a) + square (b);
-}
-
-void baz (int n)
-{
-  struct S { int x[n]; };
-}
-_ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
-  ac_cv_c99=yes
-else
-  ac_cv_c99=no
-fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
-CFLAGS="$old_CFLAGS"
-fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_c99" >&5
-$as_echo "$ac_cv_c99" >&6; }
-if test "x$ac_cv_c99" != xyes; then :
-  as_fn_error $? "gcc with GNU99 support required" "$LINENO" 5
-fi
-
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether gcc supports __attribute__((visibility()))" >&5
 $as_echo_n "checking whether gcc supports __attribute__((visibility()))... " >&6; }
 if ${ac_cv_visibility+:} false; then :
--- a/src/readelf.c
+++ b/src/readelf.c
@@ -8763,13 +8763,17 @@
       /* Apply the "operation advance" from a special opcode
 	 or DW_LNS_advance_pc (as per DWARF4 6.2.5.1).  */
       unsigned int op_addr_advance;
-      inline void advance_pc (unsigned int op_advance)
-      {
-	op_addr_advance = minimum_instr_len * ((op_index + op_advance)
-					       / max_ops_per_instr);
-	address += op_addr_advance;
-	op_index = (op_index + op_advance) % max_ops_per_instr;
-      }
+      bool show_op_index;
+      #define advance_pc(op_advance_arg) \
+      ( { \
+        unsigned int op_advance = op_advance_arg; \
+				op_addr_advance = minimum_instr_len * ((op_index + (op_advance)) \
+											/ max_ops_per_instr); \
+				address += (op_advance); \
+				show_op_index = (op_index > 0 || \
+						(op_index + (op_advance)) % max_ops_per_instr > 0); \
+				op_index = (op_index + (op_advance)) % max_ops_per_instr; \
+      } )
 
       if (max_ops_per_instr == 0)
 	{
